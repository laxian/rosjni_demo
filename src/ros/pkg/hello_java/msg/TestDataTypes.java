/* Auto-generated by genmsg_java.py for file ../../hello_java/msg/TestDataTypes.msg */

package ros.pkg.hello_java.msg;

import java.nio.ByteBuffer;

public class TestDataTypes extends ros.communication.Message {

  public short byte_;
  public char char_;
  public short uint8_;
  public byte int8_;
  public int uint16_;
  public short int16_;
  public long uint32_;
  public int int32_;
  public long uint64_;
  public long int64_;
  public float float32_;
  public double float64_;
  public java.lang.String string_ = new java.lang.String();
  public ros.communication.Time time_ = new ros.communication.Time();
  public ros.communication.Duration duration_ = new ros.communication.Duration();
  public short[] byte_v = new short[0];
  public short[] byte_f = new short[2];
  public double[] float64_v = new double[0];
  public double[] float64_f = new double[2];
  public java.util.ArrayList<java.lang.String> string_v = new java.util.ArrayList<java.lang.String>();
  public java.lang.String[] string_f = new java.lang.String[2];
  public java.util.ArrayList<ros.communication.Time> time_v = new java.util.ArrayList<ros.communication.Time>();
  public ros.communication.Time[] time_f = new ros.communication.Time[2];
  public ros.pkg.std_msgs.msg.Byte Byte_ = new ros.pkg.std_msgs.msg.Byte();
  public java.util.ArrayList<ros.pkg.std_msgs.msg.Byte> Byte_v = new java.util.ArrayList<ros.pkg.std_msgs.msg.Byte>();
  public ros.pkg.std_msgs.msg.ByteMultiArray ByteMultiArray_ = new ros.pkg.std_msgs.msg.ByteMultiArray();
  public java.util.ArrayList<ros.pkg.std_msgs.msg.ByteMultiArray> ByteMultiArray_v = new java.util.ArrayList<ros.pkg.std_msgs.msg.ByteMultiArray>();

  public TestDataTypes() {

    for(int __i=0; __i<2; __i++) {
      string_f[__i] = new java.lang.String();
    }

    for(int __i=0; __i<2; __i++) {
      time_f[__i] = new ros.communication.Time();
    }
  }

  public static java.lang.String __s_getDataType() { return "hello_java/TestDataTypes"; }
  public java.lang.String getDataType() { return __s_getDataType(); }
  public static java.lang.String __s_getMD5Sum() { return "25bc379e8ef2913896f76e9ef8bedbdc"; }
  public java.lang.String getMD5Sum() { return __s_getMD5Sum(); }
  public static java.lang.String __s_getMessageDefinition() { return "# Test all primitive types\n" +
"byte     byte_\n" +
"char     char_\n" +
"uint8    uint8_\n" +
"int8     int8_\n" +
"uint16   uint16_\n" +
"int16    int16_\n" +
"uint32   uint32_\n" +
"int32    int32_\n" +
"uint64   uint64_\n" +
"int64    int64_\n" +
"float32  float32_\n" +
"float64  float64_\n" +
"string   string_\n" +
"time     time_\n" +
"duration duration_\n" +
"\n" +
"# Test a smattering of array types\n" +
"byte[]     byte_v\n" +
"byte[2]    byte_f\n" +
"float64[]  float64_v\n" +
"float64[2] float64_f\n" +
"string[]   string_v\n" +
"string[2]  string_f\n" +
"time[]     time_v\n" +
"time[2]    time_f\n" +
"\n" +
"# Test submsgs, including both fixed and var length\n" +
"std_msgs/Byte    Byte_\n" +
"std_msgs/Byte[]  Byte_v\n" +
"\n" +
"std_msgs/ByteMultiArray    ByteMultiArray_\n" +
"std_msgs/ByteMultiArray[]  ByteMultiArray_v\n" +
"\n" +
"# Unfortunately, can't test these because roscpp message generation\n" +
"# is broken.  Hopefully rosjava works correctly ...\n" +
"# TODO: put these back in.\n" +
"\n" +
"# std_msgs/Byte[2] Byte_f\n" +
"# std_msgs/ByteMultiArray[2] ByteMultiArray_f\n" +
"\n" +
"================================================================================\n" +
"MSG: std_msgs/Byte\n" +
"byte data\n" +
"\n" +
"================================================================================\n" +
"MSG: std_msgs/ByteMultiArray\n" +
"# Please look at the MultiArrayLayout message definition for\n" +
"# documentation on all multiarrays.\n" +
"\n" +
"MultiArrayLayout  layout        # specification of data layout\n" +
"byte[]            data          # array of data\n" +
"\n" +
"\n" +
"================================================================================\n" +
"MSG: std_msgs/MultiArrayLayout\n" +
"# The multiarray declares a generic multi-dimensional array of a\n" +
"# particular data type.  Dimensions are ordered from outer most\n" +
"# to inner most.\n" +
"\n" +
"MultiArrayDimension[] dim # Array of dimension properties\n" +
"uint32 data_offset        # padding elements at front of data\n" +
"\n" +
"# Accessors should ALWAYS be written in terms of dimension stride\n" +
"# and specified outer-most dimension first.\n" +
"# \n" +
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n" +
"#\n" +
"# A standard, 3-channel 640x480 image with interleaved color channels\n" +
"# would be specified as:\n" +
"#\n" +
"# dim[0].label  = \"height\"\n" +
"# dim[0].size   = 480\n" +
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n" +
"# dim[1].label  = \"width\"\n" +
"# dim[1].size   = 640\n" +
"# dim[1].stride = 3*640 = 1920\n" +
"# dim[2].label  = \"channel\"\n" +
"# dim[2].size   = 3\n" +
"# dim[2].stride = 3\n" +
"#\n" +
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n" +
"\n" +
"================================================================================\n" +
"MSG: std_msgs/MultiArrayDimension\n" +
"string label   # label of given dimension\n" +
"uint32 size    # size of given dimension (in type units)\n" +
"uint32 stride  # stride of given dimension\n" +
""; }
  public java.lang.String getMessageDefinition() { return __s_getMessageDefinition(); }

  public TestDataTypes clone() {
    TestDataTypes c = new TestDataTypes();
    c.deserialize(serialize(0));
    return c;
  }

  public void setTo(ros.communication.Message m) {
    deserialize(m.serialize(0));
  }

  public int serializationLength() {
    int __l = 0;
    __l += 1; // byte_
    __l += 1; // char_
    __l += 1; // uint8_
    __l += 1; // int8_
    __l += 2; // uint16_
    __l += 2; // int16_
    __l += 4; // uint32_
    __l += 4; // int32_
    __l += 8; // uint64_
    __l += 8; // int64_
    __l += 4; // float32_
    __l += 8; // float64_
    __l += 4 + string_.length();
    __l += 8; // time_
    __l += 8; // duration_
    __l += 4 + byte_v.length * 1; // byte_v
    __l += 2; // byte_f
    __l += 4 + float64_v.length * 8; // float64_v
    __l += 16; // float64_f
    __l += 4;
    for(java.lang.String val : string_v) {
      __l += 4 + val.length();
    }

    for(java.lang.String val : string_f) {
      __l += 4 + val.length();
    }
    __l += 4 + time_v.size() * 8; // time_v
    __l += 16; // time_f
    __l += Byte_.serializationLength();
    __l += 4;
    for(ros.pkg.std_msgs.msg.Byte val : Byte_v) {
      __l += val.serializationLength();
    }
    __l += ByteMultiArray_.serializationLength();
    __l += 4;
    for(ros.pkg.std_msgs.msg.ByteMultiArray val : ByteMultiArray_v) {
      __l += val.serializationLength();
    }
    return __l;
  }

  public void serialize(ByteBuffer bb, int seq) {
    bb.put((byte)byte_);
    bb.put((byte)char_);
    bb.put((byte)uint8_);
    bb.put(int8_);
    bb.putShort((short)uint16_);
    bb.putShort(int16_);
    bb.putInt((int)uint32_);
    bb.putInt(int32_);
    bb.putLong(uint64_);
    bb.putLong(int64_);
    bb.putFloat(float32_);
    bb.putDouble(float64_);
    Serialization.writeString(bb, string_);
    Serialization.writeTime(bb, time_);
    Serialization.writeDuration(bb, duration_);
    bb.putInt(byte_v.length);
    for(short val : byte_v) {
      bb.put((byte)val);
    }

    for(short val : byte_f) {
      bb.put((byte)val);
    }
    bb.putInt(float64_v.length);
    for(double val : float64_v) {
      bb.putDouble(val);
    }

    for(double val : float64_f) {
      bb.putDouble(val);
    }
    bb.putInt(string_v.size());
    for(java.lang.String val : string_v) {
      Serialization.writeString(bb, val);
    }

    for(java.lang.String val : string_f) {
      Serialization.writeString(bb, val);
    }
    bb.putInt(time_v.size());
    for(ros.communication.Time val : time_v) {
      Serialization.writeTime(bb, val);
    }

    for(ros.communication.Time val : time_f) {
      Serialization.writeTime(bb, val);
    }
    Byte_.serialize(bb, seq);
    bb.putInt(Byte_v.size());
    for(ros.pkg.std_msgs.msg.Byte val : Byte_v) {
      val.serialize(bb, seq);
    }
    ByteMultiArray_.serialize(bb, seq);
    bb.putInt(ByteMultiArray_v.size());
    for(ros.pkg.std_msgs.msg.ByteMultiArray val : ByteMultiArray_v) {
      val.serialize(bb, seq);
    }
  }

  public void deserialize(ByteBuffer bb) {
    byte_ = (short)(bb.get() & 0xff);
    char_ = (char)(bb.get() & 0xff);
    uint8_ = (short)(bb.get() & 0xff);
    int8_ = bb.get();
    uint16_ = (int)(bb.getShort() & 0xffff);
    int16_ = bb.getShort();
    uint32_ = (long)(bb.getInt() & 0xffffffff);
    int32_ = bb.getInt();
    uint64_ = bb.getLong();
    int64_ = bb.getLong();
    float32_ = bb.getFloat();
    float64_ = bb.getDouble();
    string_ = Serialization.readString(bb);
    time_ = Serialization.readTime(bb);
    duration_ = Serialization.readDuration(bb);

    int __byte_v_len = bb.getInt();
    byte_v = new short[__byte_v_len];
    for(int __i=0; __i<__byte_v_len; __i++) {
      byte_v[__i] = (short)(bb.get() & 0xff);
    }

    int __byte_f_len = byte_f.length;;
    byte_f = new short[__byte_f_len];
    for(int __i=0; __i<__byte_f_len; __i++) {
      byte_f[__i] = (short)(bb.get() & 0xff);
    }

    int __float64_v_len = bb.getInt();
    float64_v = new double[__float64_v_len];
    for(int __i=0; __i<__float64_v_len; __i++) {
      float64_v[__i] = bb.getDouble();
    }

    int __float64_f_len = float64_f.length;;
    float64_f = new double[__float64_f_len];
    for(int __i=0; __i<__float64_f_len; __i++) {
      float64_f[__i] = bb.getDouble();
    }

    int __string_v_len = bb.getInt();
    string_v = new java.util.ArrayList<java.lang.String>(__string_v_len);
    for(int __i=0; __i<__string_v_len; __i++) {
      string_v.add(Serialization.readString(bb));
    }

    int __string_f_len = string_f.length;;
    string_f = new java.lang.String[__string_f_len];
    for(int __i=0; __i<__string_f_len; __i++) {
      string_f[__i] = Serialization.readString(bb);
    }

    int __time_v_len = bb.getInt();
    time_v = new java.util.ArrayList<ros.communication.Time>(__time_v_len);
    for(int __i=0; __i<__time_v_len; __i++) {
      time_v.add(Serialization.readTime(bb));
    }

    int __time_f_len = time_f.length;;
    time_f = new ros.communication.Time[__time_f_len];
    for(int __i=0; __i<__time_f_len; __i++) {
      time_f[__i] = Serialization.readTime(bb);
    }
    Byte_.deserialize(bb);

    int __Byte_v_len = bb.getInt();
    Byte_v = new java.util.ArrayList<ros.pkg.std_msgs.msg.Byte>(__Byte_v_len);
    for(int __i=0; __i<__Byte_v_len; __i++) {
      ros.pkg.std_msgs.msg.Byte __tmp = new ros.pkg.std_msgs.msg.Byte();
      __tmp.deserialize(bb);
      Byte_v.add(__tmp);;
    }
    ByteMultiArray_.deserialize(bb);

    int __ByteMultiArray_v_len = bb.getInt();
    ByteMultiArray_v = new java.util.ArrayList<ros.pkg.std_msgs.msg.ByteMultiArray>(__ByteMultiArray_v_len);
    for(int __i=0; __i<__ByteMultiArray_v_len; __i++) {
      ros.pkg.std_msgs.msg.ByteMultiArray __tmp = new ros.pkg.std_msgs.msg.ByteMultiArray();
      __tmp.deserialize(bb);
      ByteMultiArray_v.add(__tmp);;
    }
  }

  @SuppressWarnings("all")
  public boolean equals(Object o) {
    if(!(o instanceof TestDataTypes))
      return false;
    TestDataTypes other = (TestDataTypes) o;
    return
      byte_ == other.byte_ &&
      char_ == other.char_ &&
      uint8_ == other.uint8_ &&
      int8_ == other.int8_ &&
      uint16_ == other.uint16_ &&
      int16_ == other.int16_ &&
      uint32_ == other.uint32_ &&
      int32_ == other.int32_ &&
      uint64_ == other.uint64_ &&
      int64_ == other.int64_ &&
      float32_ == other.float32_ &&
      float64_ == other.float64_ &&
      string_.equals(other.string_) &&
      time_.equals(other.time_) &&
      duration_.equals(other.duration_) &&
      java.util.Arrays.equals(byte_v, other.byte_v) &&
      java.util.Arrays.equals(byte_f, other.byte_f) &&
      java.util.Arrays.equals(float64_v, other.float64_v) &&
      java.util.Arrays.equals(float64_f, other.float64_f) &&
      string_v.equals(other.string_v) &&
      java.util.Arrays.equals(string_f, other.string_f) &&
      time_v.equals(other.time_v) &&
      java.util.Arrays.equals(time_f, other.time_f) &&
      Byte_.equals(other.Byte_) &&
      Byte_v.equals(other.Byte_v) &&
      ByteMultiArray_.equals(other.ByteMultiArray_) &&
      ByteMultiArray_v.equals(other.ByteMultiArray_v) &&
      true;
  }

  @SuppressWarnings("all")
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    long tmp;
    result = prime * result + this.byte_;
    result = prime * result + this.char_;
    result = prime * result + this.uint8_;
    result = prime * result + this.int8_;
    result = prime * result + this.uint16_;
    result = prime * result + this.int16_;
    result = prime * result + (int)(this.uint32_ ^ (this.uint32_ >>> 32));
    result = prime * result + this.int32_;
    result = prime * result + (int)(this.uint64_ ^ (this.uint64_ >>> 32));
    result = prime * result + (int)(this.int64_ ^ (this.int64_ >>> 32));
    result = prime * result + Float.floatToIntBits(this.float32_);
    result = prime * result + (int)((tmp = Double.doubleToLongBits(this.float64_)) ^ (tmp >>> 32));
    result = prime * result + (this.string_ == null ? 0 : this.string_.hashCode());
    result = prime * result + (this.time_ == null ? 0 : this.time_.hashCode());
    result = prime * result + (this.duration_ == null ? 0 : this.duration_.hashCode());
    result = prime * result + java.util.Arrays.hashCode(this.byte_v);
    result = prime * result + java.util.Arrays.hashCode(this.byte_f);
    result = prime * result + java.util.Arrays.hashCode(this.float64_v);
    result = prime * result + java.util.Arrays.hashCode(this.float64_f);
    result = prime * result + (this.string_v == null ? 0 : this.string_v.hashCode());
    result = prime * result + java.util.Arrays.hashCode(this.string_f);
    result = prime * result + (this.time_v == null ? 0 : this.time_v.hashCode());
    result = prime * result + java.util.Arrays.hashCode(this.time_f);
    result = prime * result + (this.Byte_ == null ? 0 : this.Byte_.hashCode());
    result = prime * result + (this.Byte_v == null ? 0 : this.Byte_v.hashCode());
    result = prime * result + (this.ByteMultiArray_ == null ? 0 : this.ByteMultiArray_.hashCode());
    result = prime * result + (this.ByteMultiArray_v == null ? 0 : this.ByteMultiArray_v.hashCode());
    return result;
  }
} // class TestDataTypes

